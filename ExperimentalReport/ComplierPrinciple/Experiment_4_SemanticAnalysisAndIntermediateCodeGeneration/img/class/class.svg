<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" contentscripttype="application/ecmascript" contentstyletype="text/css" height="1346.487px" preserveAspectRatio="none" style="width:992px;height:1346px;" version="1.1" viewBox="0 0 992 1346" width="992.3003px" zoomAndPan="magnify"><defs><filter height="300%" id="f45dj99errfs7" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="1.9249278152069298"></feGaussianBlur><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"></feColorMatrix><feOffset dx="3.8498556304138596" dy="3.8498556304138596" in="blurOut2" result="blurOut3"></feOffset><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"></feBlend></filter></defs><g><!--MD5=[14206c5a513f4f95fcbd1ec2f195129c]
class symbols--><rect fill="#FEFECE" filter="url(#f45dj99errfs7)" height="176.3297" id="symbols" style="stroke: #A80036; stroke-width: 1.4436958614051973;" width="204.0423" x="383.5419" y="284.8893"></rect><ellipse cx="458.8547" cy="300.2887" fill="#ADD1B2" rx="10.5871" ry="10.5871" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></ellipse><path d="M457.4862,305.4469 Q455.6966,305.4469 454.6439,304.1085 Q453.5912,302.7701 453.5912,299.8977 Q453.5912,297.4615 454.7116,295.8674 Q455.8319,294.2733 457.7418,294.2733 Q459.1554,294.2733 459.6066,294.3936 Q460.0577,294.5891 460.0577,294.5891 Q460.0577,294.5891 460.0577,294.5215 Q460.0577,294.4538 460.6442,293.5665 L461.6518,297.0855 L460.3736,297.4765 Q459.9224,295.9877 459.2833,295.3486 Q458.6441,294.7095 457.6215,294.7095 Q457.2455,294.7095 456.5087,296.1832 Q455.7718,297.657 455.7718,299.8225 Q455.7718,302.1986 456.4109,303.5371 Q457.05,304.8755 457.5614,304.8755 Q458.584,304.8755 459.3133,304.1386 Q460.0427,303.4017 460.3736,301.8076 L461.6518,302.3791 Q461.336,303.7326 460.4713,304.5897 Q459.6066,305.4469 457.4862,305.4469 Z "></path><text fill="#000000" font-family="sans-serif" font-size="11.5496" lengthAdjust="spacingAndGlyphs" textLength="45.2358" x="478.5852" y="305.6377">symbols</text><line style="stroke: #A80036; stroke-width: 1.4436958614051973;" x1="384.5043" x2="586.6218" y1="315.6882" y2="315.6882"></line><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="137.6323" x="389.3167" y="331.6708">终结符和非终结符组成的符号</text><line style="stroke: #A80036; stroke-width: 0.9624639076034649; stroke-dasharray: 1.0,2.0;" x1="384.5043" x2="586.6218" y1="337.8469" y2="337.8469"></line><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="391.2416" y="345.5466"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="179.0183" x="402.7911" y="353.8296">place: std::string 属性文法中place的值</text><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="391.2416" y="360.0057"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="177.0934" x="402.7911" y="368.2886">ans: int  如果是算术表达式，记录其值</text><ellipse cx="394.129" cy="377.3521" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="156.8816" x="402.7911" y="382.7476">getClassName(): virtual std::string</text><ellipse cx="394.129" cy="391.8112" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="83.7344" x="402.7911" y="397.2067">print(): virtual void</text><ellipse cx="394.129" cy="406.2702" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="127.0452" x="402.7911" y="411.6657">setPlace(std::string p): void</text><ellipse cx="394.129" cy="420.7293" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="99.1338" x="402.7911" y="426.1248">getPlace(): std::string</text><ellipse cx="394.129" cy="435.1883" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="76.9971" x="402.7911" y="440.5838">setAns(int): void</text><ellipse cx="394.129" cy="449.6473" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="57.7478" x="402.7911" y="455.0429">getAns(): int</text><!--MD5=[60cc1c2bd56641e618da5c20b30275a6]
class symbolsVT--><rect fill="#FEFECE" filter="url(#f45dj99errfs7)" height="161.8706" id="symbolsVT" style="stroke: #A80036; stroke-width: 1.4436958614051973;" width="261.7902" x="75.5534" y="36.5736"></rect><ellipse cx="173.0029" cy="51.9731" fill="#ADD1B2" rx="10.5871" ry="10.5871" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></ellipse><path d="M171.6344,57.1313 Q169.8448,57.1313 168.7921,55.7928 Q167.7394,54.4544 167.7394,51.5821 Q167.7394,49.1458 168.8598,47.5517 Q169.9801,45.9577 171.89,45.9577 Q173.3037,45.9577 173.7548,46.078 Q174.206,46.2735 174.206,46.2735 Q174.206,46.2735 174.206,46.2058 Q174.206,46.1381 174.7925,45.2508 L175.8,48.7699 L174.5218,49.1609 Q174.0706,47.672 173.4315,47.0329 Q172.7923,46.3938 171.7697,46.3938 Q171.3938,46.3938 170.6569,47.8675 Q169.92,49.3413 169.92,51.5069 Q169.92,53.8829 170.5591,55.2214 Q171.1983,56.5598 171.7096,56.5598 Q172.7322,56.5598 173.4616,55.8229 Q174.1909,55.086 174.5218,53.4919 L175.8,54.0634 Q175.4842,55.4169 174.6195,56.2741 Q173.7548,57.1313 171.6344,57.1313 Z "></path><text fill="#000000" font-family="sans-serif" font-size="11.5496" lengthAdjust="spacingAndGlyphs" textLength="58.7103" x="192.7334" y="57.3221">symbolsVT</text><line style="stroke: #A80036; stroke-width: 1.4436958614051973;" x1="76.5159" x2="336.3811" y1="67.3725" y2="67.3725"></line><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="31.7613" x="81.3282" y="83.3551">终结符</text><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="148.2194" x="81.3282" y="97.8142">终结符由终结符的值和编码构成</text><line style="stroke: #A80036; stroke-width: 0.9624639076034649; stroke-dasharray: 1.0,2.0;" x1="76.5159" x2="336.3811" y1="103.9903" y2="103.9903"></line><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="83.2531" y="111.69"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="132.82" x="94.8027" y="119.9729">word: std::string 终结符的值</text><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="83.2531" y="126.149"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="236.7661" x="94.8027" y="134.432">code: std::string 词法分析后终结符的标识（编码）</text><ellipse cx="86.1405" cy="143.4955" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="156.8816" x="94.8027" y="148.891">getClassName(): virtual std::string</text><ellipse cx="86.1405" cy="157.9545" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="99.1338" x="94.8027" y="163.3501">getWord(): std::string</text><ellipse cx="86.1405" cy="172.4136" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="98.1713" x="94.8027" y="177.8091">getCode(): std::string</text><ellipse cx="86.1405" cy="186.8726" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="52.9355" x="94.8027" y="192.2681">print(): void</text><!--MD5=[863fa5218c522b12d482362076ef1ce2]
class symbolsVN--><rect fill="#FEFECE" filter="url(#f45dj99errfs7)" height="219.7068" id="symbolsVN" style="stroke: #A80036; stroke-width: 1.4436958614051973;" width="297.4013" x="566.8912" y="7.6997"></rect><ellipse cx="681.1838" cy="23.0991" fill="#ADD1B2" rx="10.5871" ry="10.5871" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></ellipse><path d="M679.8153,28.2573 Q678.0257,28.2573 676.9731,26.9189 Q675.9204,25.5805 675.9204,22.7081 Q675.9204,20.2719 677.0407,18.6778 Q678.1611,17.0837 680.071,17.0837 Q681.4846,17.0837 681.9358,17.204 Q682.3869,17.3995 682.3869,17.3995 Q682.3869,17.3995 682.3869,17.3319 Q682.3869,17.2642 682.9734,16.3769 L683.981,19.8959 L682.7027,20.2869 Q682.2516,18.7981 681.6124,18.159 Q680.9733,17.5199 679.9507,17.5199 Q679.5747,17.5199 678.8378,18.9936 Q678.1009,20.4674 678.1009,22.6329 Q678.1009,25.009 678.7401,26.3474 Q679.3792,27.6859 679.8905,27.6859 Q680.9131,27.6859 681.6425,26.949 Q682.3719,26.2121 682.7027,24.618 L683.981,25.1895 Q683.6652,26.5429 682.8005,27.4001 Q681.9358,28.2573 679.8153,28.2573 Z "></path><text fill="#000000" font-family="sans-serif" font-size="11.5496" lengthAdjust="spacingAndGlyphs" textLength="60.6352" x="700.9143" y="28.4481">symbolsVN</text><line style="stroke: #A80036; stroke-width: 1.4436958614051973;" x1="567.8537" x2="863.3301" y1="38.4986" y2="38.4986"></line><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="42.3484" x="572.666" y="54.4812">非终结符</text><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="264.6776" x="572.666" y="68.9402">非终结符由其左部的非终结符和有部一个一些产生式构成</text><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="285.8518" x="572.666" y="83.3993">产生式即为一些符号的排列，此处存储的是一些产生式的指针</text><line style="stroke: #A80036; stroke-width: 0.9624639076034649; stroke-dasharray: 1.0,2.0;" x1="567.8537" x2="863.3301" y1="89.5754" y2="89.5754"></line><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="574.591" y="97.2751"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="171.3186" x="586.1405" y="105.558">name: std::string 非终结符左部名称X</text><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="574.591" y="111.7342"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="174.206" x="586.1405" y="120.0171">p[maxnNum]: production * 产生式集合</text><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="574.591" y="126.1932"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="94.3215" x="586.1405" y="134.4761">num: int  产生式个数</text><ellipse cx="577.4783" cy="143.5396" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="126.0828" x="586.1405" y="148.9352">getClassName(): std::string</text><ellipse cx="577.4783" cy="157.9987" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="100.0962" x="586.1405" y="163.3942">getName(): std::string</text><ellipse cx="577.4783" cy="172.4577" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="267.565" x="586.1405" y="177.8533">insertProduction(production *newp): void 加入一个产生式</text><ellipse cx="577.4783" cy="186.9168" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="260.8277" x="586.1405" y="192.3123">getProductionIndexOf(int i): production* 获得第i个产生式</text><ellipse cx="577.4783" cy="201.3758" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="173.2435" x="586.1405" y="206.7714">getAllProduction(): 获得所有的产生式</text><ellipse cx="577.4783" cy="215.8349" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="52.9355" x="586.1405" y="221.2304">print(): void</text><!--MD5=[ca8828f629060c71aeac5c994a5a852f]
class production--><rect fill="#FEFECE" filter="url(#f45dj99errfs7)" height="234.1659" id="production" style="stroke: #A80036; stroke-width: 1.4436958614051973;" width="455.2454" x="257.9403" y="518.768"></rect><ellipse cx="453.5611" cy="534.1675" fill="#ADD1B2" rx="10.5871" ry="10.5871" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></ellipse><path d="M452.1926,539.3257 Q450.403,539.3257 449.3503,537.9872 Q448.2976,536.6488 448.2976,533.7765 Q448.2976,531.3402 449.418,529.7462 Q450.5384,528.1521 452.4483,528.1521 Q453.8619,528.1521 454.313,528.2724 Q454.7642,528.4679 454.7642,528.4679 Q454.7642,528.4679 454.7642,528.4002 Q454.7642,528.3325 455.3507,527.4453 L456.3583,530.9643 L455.08,531.3553 Q454.6288,529.8665 453.9897,529.2273 Q453.3506,528.5882 452.328,528.5882 Q451.952,528.5882 451.2151,530.062 Q450.4782,531.5357 450.4782,533.7013 Q450.4782,536.0774 451.1174,537.4158 Q451.7565,538.7542 452.2678,538.7542 Q453.2904,538.7542 454.0198,538.0173 Q454.7492,537.2804 455.08,535.6864 L456.3583,536.2578 Q456.0425,537.6113 455.1778,538.4685 Q454.313,539.3257 452.1926,539.3257 Z "></path><text fill="#000000" font-family="sans-serif" font-size="11.5496" lengthAdjust="spacingAndGlyphs" textLength="55.8229" x="473.2916" y="539.5165">production</text><line style="stroke: #A80036; stroke-width: 1.4436958614051973;" x1="258.9028" x2="712.2233" y1="549.5669" y2="549.5669"></line><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="31.7613" x="263.7151" y="565.5495">产生式</text><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="285.8518" x="263.7151" y="580.0086">一个产生式由一个左部的非终结符和一些右部的符号集合构成</text><line style="stroke: #A80036; stroke-width: 0.9624639076034649; stroke-dasharray: 1.0,2.0;" x1="258.9028" x2="712.2233" y1="586.1847" y2="586.1847"></line><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="265.64" y="593.8844"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="185.7555" x="277.1896" y="602.1673">vn: symbolsVN * 产生式左部的非终结符</text><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="265.64" y="608.3435"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="410.9721" x="277.1896" y="616.6264">pro[maxnLen]: symbols* 产生式，由一些非终结符和终结符构成，故使用符号指针来指引</text><rect fill="#F24D5C" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="265.64" y="622.8025"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="430.2214" x="277.1896" y="631.0854">(*attributes) (production *p): void 每一条产生式对应的一些属性文法的操作，用指针函数实现</text><ellipse cx="268.5274" cy="640.1489" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="264.6776" x="277.1896" y="645.5445">push_back(symbols *a): void 为产生式后部插入一个符号</text><ellipse cx="268.5274" cy="654.608" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="207.8922" x="277.1896" y="660.0035">getVN(): symbolsVN* 获得左部非终结符符号</text><ellipse cx="268.5274" cy="669.067" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="221.3667" x="277.1896" y="674.4626">getProduction(): symbols** 获得产生式指针数组</text><ellipse cx="268.5274" cy="683.5261" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="132.82" x="277.1896" y="688.9216">getLen(): int 获得产生式长度</text><ellipse cx="268.5274" cy="697.9851" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="313.7632" x="277.1896" y="703.3807">getProductionIndexOf(int i): symbols* 获得产生式中第i个位置的符号</text><ellipse cx="268.5274" cy="712.4442" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="338.7873" x="277.1896" y="717.8397">setAttributesFunction(void (*a)(production* p)): void 设置属性文法的函数</text><ellipse cx="268.5274" cy="726.9032" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="376.3234" x="277.1896" y="732.2987">(*getAttributesFunction())(production*): void 获得该产生式对应的语义分析的代码</text><ellipse cx="268.5274" cy="741.3623" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="52.9355" x="277.1896" y="746.7578">print(): void</text><!--MD5=[964012e3a2694457aad972850207b25a]
class analysisTable--><rect fill="#FEFECE" filter="url(#f45dj99errfs7)" height="234.1659" id="analysisTable" style="stroke: #A80036; stroke-width: 1.4436958614051973;" width="378.2483" x="296.4389" y="810.3946"></rect><ellipse cx="444.4177" cy="825.794" fill="#ADD1B2" rx="10.5871" ry="10.5871" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></ellipse><path d="M443.0492,830.9522 Q441.2596,830.9522 440.2069,829.6138 Q439.1542,828.2754 439.1542,825.403 Q439.1542,822.9668 440.2746,821.3727 Q441.395,819.7786 443.3049,819.7786 Q444.7185,819.7786 445.1696,819.8989 Q445.6208,820.0944 445.6208,820.0944 Q445.6208,820.0944 445.6208,820.0268 Q445.6208,819.9591 446.2073,819.0718 L447.2149,822.5908 L445.9366,822.9818 Q445.4854,821.493 444.8463,820.8539 Q444.2072,820.2147 443.1846,820.2147 Q442.8086,820.2147 442.0717,821.6885 Q441.3348,823.1623 441.3348,825.3278 Q441.3348,827.7039 441.974,829.0423 Q442.6131,830.3808 443.1244,830.3808 Q444.147,830.3808 444.8764,829.6439 Q445.6058,828.907 445.9366,827.3129 L447.2149,827.8844 Q446.8991,829.2378 446.0343,830.095 Q445.1696,830.9522 443.0492,830.9522 Z "></path><text fill="#000000" font-family="sans-serif" font-size="11.5496" lengthAdjust="spacingAndGlyphs" textLength="74.1097" x="464.1482" y="831.143">analysisTable</text><line style="stroke: #A80036; stroke-width: 1.4436958614051973;" x1="297.4013" x2="673.7247" y1="841.1935" y2="841.1935"></line><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="31.7613" x="302.2137" y="857.1761">分析表</text><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="128.9702" x="302.2137" y="871.6351">由ACTION表和GOTO表组成</text><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="178.0558" x="302.2137" y="886.0942">由前期的分析得到该文法的SLR分析表</text><line style="stroke: #A80036; stroke-width: 0.9624639076034649; stroke-dasharray: 1.0,2.0;" x1="297.4013" x2="673.7247" y1="892.2703" y2="892.2703"></line><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="304.1386" y="899.97"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="153.9942" x="315.6882" y="908.2529">ACTION: ACTIONTable ACTION表</text><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="304.1386" y="914.4291"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="130.8951" x="315.6882" y="922.712">GOTO: GOTOTable GOTO表</text><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="304.1386" y="928.8881"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="127.0452" x="315.6882" y="937.171">numofstate: int 状态个数I_n</text><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="304.1386" y="943.3472"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="353.2243" x="315.6882" y="951.6301">productions[NUMOFPRODUCTIONS]: production* 产生式数组，下标即为编号</text><ellipse cx="307.026" cy="960.6936" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="206.9297" x="315.6882" y="966.0891">insertSymbols(symbols*): void 插入一个符号</text><ellipse cx="307.026" cy="975.1526" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="299.3263" x="315.6882" y="980.5482">insertProduction(production* p): void 插入一条产生式，自动编号</text><ellipse cx="307.026" cy="989.6117" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="224.2541" x="315.6882" y="995.0072">getProduction(int i): production* 获得第i条产生式</text><ellipse cx="307.026" cy="1004.0707" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="325.3128" x="315.6882" y="1009.4663">insert(int state, symbols* s, char ch, int numOfPro): void 插入一个状态</text><ellipse cx="307.026" cy="1018.5298" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="274.3022" x="315.6882" y="1023.9253">get(int state, symbols* s): std::pair&lt;char, int&gt; 获得一个状态</text><ellipse cx="307.026" cy="1032.9888" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="52.9355" x="315.6882" y="1038.3844">print(): void</text><!--MD5=[c9455626be53c03637fd2cef487c61ac]
class ACTIONTable--><rect fill="#FEFECE" filter="url(#f45dj99errfs7)" height="234.1659" id="ACTIONTable" style="stroke: #A80036; stroke-width: 1.4436958614051973;" width="480.2695" x="5.7748" y="1102.0212"></rect><ellipse cx="205.7267" cy="1117.4206" fill="#ADD1B2" rx="10.5871" ry="10.5871" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></ellipse><path d="M204.3582,1122.5788 Q202.5686,1122.5788 201.5159,1121.2404 Q200.4632,1119.9019 200.4632,1117.0296 Q200.4632,1114.5934 201.5836,1112.9993 Q202.7039,1111.4052 204.6138,1111.4052 Q206.0274,1111.4052 206.4786,1111.5255 Q206.9297,1111.721 206.9297,1111.721 Q206.9297,1111.721 206.9297,1111.6533 Q206.9297,1111.5857 207.5162,1110.6984 L208.5238,1114.2174 L207.2455,1114.6084 Q206.7944,1113.1196 206.1553,1112.4804 Q205.5161,1111.8413 204.4935,1111.8413 Q204.1175,1111.8413 203.3807,1113.3151 Q202.6438,1114.7889 202.6438,1116.9544 Q202.6438,1119.3305 203.2829,1120.6689 Q203.922,1122.0073 204.4333,1122.0073 Q205.456,1122.0073 206.1853,1121.2705 Q206.9147,1120.5336 207.2455,1118.9395 L208.5238,1119.5109 Q208.208,1120.8644 207.3433,1121.7216 Q206.4786,1122.5788 204.3582,1122.5788 Z "></path><text fill="#000000" font-family="sans-serif" font-size="11.5496" lengthAdjust="spacingAndGlyphs" textLength="72.1848" x="225.4572" y="1122.7696">ACTIONTable</text><line style="stroke: #A80036; stroke-width: 1.4436958614051973;" x1="6.7372" x2="485.0818" y1="1132.82" y2="1132.82"></line><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="13.4745" y="1140.5197"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="455.2454" x="25.0241" y="1148.8027">ACTION[NUMOFSTATE][NUMOFVT]: std::pair&lt;char, int&gt; ACTION表，四种构成： s_i, r_i, acc, err，</text><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="243.5034" x="25.0241" y="1163.2617">分别表示移进状态、规约状态、接受状态和错误状态</text><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="13.4745" y="1169.4378"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="171.3186" x="25.0241" y="1177.7207">numofstate: int ACTION表状态的数量</text><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="13.4745" y="1183.8969"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="205.9673" x="25.0241" y="1192.1798">numofsymbolsvt: int ACTION表终结符的数量</text><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="13.4745" y="1198.3559"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="297.4013" x="25.0241" y="1206.6388">vtmap: std::map&lt;symbolsVT*, int&gt; 终结符对应在分析表中的位置</text><line style="stroke: #A80036; stroke-width: 1.4436958614051973;" x1="6.7372" x2="485.0818" y1="1212.815" y2="1212.815"></line><rect fill="#F24D5C" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="13.4745" y="1220.5147"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="235.8037" x="25.0241" y="1228.7976">getVTMap(symbolsVT*): int 获得终结符对应的编号</text><ellipse cx="16.3619" cy="1237.8611" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="211.7421" x="25.0241" y="1243.2566">setNumOfState(int): void 设置表的状态的数量</text><ellipse cx="16.3619" cy="1252.3202" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="310.8758" x="25.0241" y="1257.7157">insertVT(symbolsVT*): void 插入一个终结符以及给一个对应的编号</text><ellipse cx="16.3619" cy="1266.7792" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="348.4119" x="25.0241" y="1272.1747">insertSHIFT(int state, symbolsVT* vt, int numOfPro): void 插入一个移进状态</text><ellipse cx="16.3619" cy="1281.2383" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="359.9615" x="25.0241" y="1286.6338">insertREDUCE(int state, symbolsVT* vt, int numOfPro): void 插入一个规约状态</text><ellipse cx="16.3619" cy="1295.6973" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="273.3397" x="25.0241" y="1301.0928">insertACC(int state, symbolsVT* vt): void 插入一个acc状态</text><ellipse cx="16.3619" cy="1310.1563" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="363.8114" x="25.0241" y="1315.5519">getACTION(int state, symbolsVT* vt): std::pair&lt;char, int&gt; 获得一个ACTION信息</text><ellipse cx="16.3619" cy="1324.6154" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="143.4071" x="25.0241" y="1330.0109">print(): void 调试输出ACTON表</text><!--MD5=[6483fd4d9de00e571941e1b8b816155a]
class GOTOTable--><rect fill="#FEFECE" filter="url(#f45dj99errfs7)" height="161.8706" id="GOTOTable" style="stroke: #A80036; stroke-width: 1.4436958614051973;" width="408.0847" x="574.1097" y="1138.1136"></rect><ellipse cx="742.7815" cy="1153.513" fill="#ADD1B2" rx="10.5871" ry="10.5871" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></ellipse><path d="M741.413,1158.6712 Q739.6234,1158.6712 738.5707,1157.3328 Q737.518,1155.9943 737.518,1153.122 Q737.518,1150.6858 738.6384,1149.0917 Q739.7588,1147.4976 741.6687,1147.4976 Q743.0823,1147.4976 743.5334,1147.6179 Q743.9846,1147.8134 743.9846,1147.8134 Q743.9846,1147.8134 743.9846,1147.7457 Q743.9846,1147.6781 744.5711,1146.7908 L745.5787,1150.3098 L744.3004,1150.7008 Q743.8493,1149.212 743.2101,1148.5728 Q742.571,1147.9337 741.5484,1147.9337 Q741.1724,1147.9337 740.4355,1149.4075 Q739.6986,1150.8813 739.6986,1153.0468 Q739.6986,1155.4229 740.3378,1156.7613 Q740.9769,1158.0997 741.4882,1158.0997 Q742.5108,1158.0997 743.2402,1157.3628 Q743.9696,1156.626 744.3004,1155.0319 L745.5787,1155.6033 Q745.2629,1156.9568 744.3982,1157.814 Q743.5334,1158.6712 741.413,1158.6712 Z "></path><text fill="#000000" font-family="sans-serif" font-size="11.5496" lengthAdjust="spacingAndGlyphs" textLength="62.5602" x="762.512" y="1158.862">GOTOTable</text><line style="stroke: #A80036; stroke-width: 1.4436958614051973;" x1="575.0722" x2="981.232" y1="1168.9124" y2="1168.9124"></line><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="581.8094" y="1176.6121"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="383.0606" x="593.359" y="1184.8951">GOTO[NUMOFSTATE][NUMOFVN]: int GOTO表，当为非-1数字时表示某个合法状态</text><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="581.8094" y="1191.0712"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="68.3349" x="593.359" y="1199.3541">numofstate: int</text><rect fill="none" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="581.8094" y="1205.5302"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="311.8383" x="593.359" y="1213.8131">vnmap: std::map&lt;symbolsVN*, int&gt; 非终结符对应在分析表中的位置</text><line style="stroke: #A80036; stroke-width: 1.4436958614051973;" x1="575.0722" x2="981.232" y1="1219.9893" y2="1219.9893"></line><rect fill="#F24D5C" height="5.7748" style="stroke: #C82930; stroke-width: 0.9624639076034649;" width="5.7748" x="581.8094" y="1227.689"></rect><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="248.3157" x="593.359" y="1235.9719">getVNMap(symbolsVN*): int 获得非终结符对应的编号</text><ellipse cx="584.6968" cy="1245.0354" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="219.4418" x="593.359" y="1250.4309">setNumOfState(int): void 设置GOTO表的状态数</text><ellipse cx="584.6968" cy="1259.4945" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="217.5168" x="593.359" y="1264.89">insertVN(symbolsVN*): void 插入一个非终结符</text><ellipse cx="584.6968" cy="1273.9535" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="333.0125" x="593.359" y="1279.349">insert(int state, symbolsVN* vn, int numOfPro): void 插入一个GOTO状态</text><ellipse cx="584.6968" cy="1288.4126" fill="#84BE84" rx="2.8874" ry="2.8874" style="stroke: #038048; stroke-width: 0.9624639076034649;"></ellipse><text fill="#000000" font-family="sans-serif" font-size="10.5871" lengthAdjust="spacingAndGlyphs" textLength="247.3532" x="593.359" y="1293.8081">get(int state, symbolsVN* vn): int 获得一个GOTO状态</text><!--MD5=[4fa750cd51383fb8f0db0b9ac9d1c8ae]
reverse link symbolsVT to symbols--><path d="M308.8229,211.4052 C335.2252,235.3898 363.5419,261.1165 389.6035,284.8027 " fill="none" id="symbolsVT&lt;-symbols" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></path><polygon fill="none" points="304.0953,216.2079,294.3792,198.2772,313.1559,206.2368,304.0953,216.2079" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></polygon><!--MD5=[48212c76556f02a7422c70aaff6e2756]
reverse link symbolsVN to symbols--><path d="M603.5756,241.8864 C590.4042,256.4004 577.18,270.9817 564.5948,284.8604 " fill="none" id="symbolsVN&lt;-symbols" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></path><polygon fill="none" points="598.7815,237.1415,616.7036,227.411,608.7623,246.1886,598.7815,237.1415" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></polygon><!--MD5=[6aea9ff63c2c3035c020239e808150ab]
reverse link symbols to production--><path d="M485.563,466.3292 C485.563,483.1761 485.563,500.9509 485.563,518.3869 " fill="none" id="symbols&lt;-production" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></path><polygon fill="#A80036" points="485.563,461.1319,481.7132,469.794,485.563,465.9442,489.4129,469.794,485.563,461.1319" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></polygon><!--MD5=[59f28342599692795863a9ea0fd11889]
reverse link symbolsVN to production--><path d="M687.3003,232.05 C668.1954,300.308 639.9066,387.8104 603.9461,461.0202 C594.5332,480.1838 583.2397,499.6612 571.4177,518.308 " fill="none" id="symbolsVN&lt;-production" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></path><polygon fill="#A80036" points="688.6603,227.1704,682.6459,234.4972,687.3808,231.8095,690.0685,236.5443,688.6603,227.1704" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></polygon><!--MD5=[c8b87d60b1138ba9ed5ae907abb781eb]
reverse link production to analysisTable--><path d="M485.563,757.718 C485.563,775.0818 485.563,792.9143 485.563,810.1819 " fill="none" id="production&lt;-analysisTable" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></path><polygon fill="#A80036" points="485.563,752.8335,481.7132,761.4957,485.563,757.6458,489.4129,761.4957,485.563,752.8335" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></polygon><!--MD5=[9b11171d50a7a4d38c04f88c6d54aba8]
reverse link symbolsVT to analysisTable--><path d="M189.0529,203.3782 C167.4851,331.3571 144.3879,577.1973 241.0972,752.6468 C255.0472,777.9538 274.4379,800.4533 296.256,820.1732 " fill="none" id="symbolsVT&lt;-analysisTable" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></path><polygon fill="#A80036" points="189.8845,198.5082,184.6296,206.3974,189.0733,203.2516,192.2191,207.6954,189.8845,198.5082" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></polygon><!--MD5=[5ed4889495a2fa5e95cd1c074cd5a850]
reverse link symbolsVN to analysisTable--><path d="M749.2599,231.9249 C781.9143,364.7931 815.2156,587.6044 730.0289,752.6468 C716.5361,778.7883 697.0914,801.8518 674.9788,821.9249 " fill="none" id="symbolsVN&lt;-analysisTable" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></path><polygon fill="#A80036" points="748.0982,227.2377,746.4661,236.5753,749.2663,231.9061,753.9355,234.7063,748.0982,227.2377" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></polygon><!--MD5=[1d8d476e29902a1abb557a803a194ee3]
link analysisTable to ACTIONTable--><path d="M389.4678,1044.4601 C374.9394,1062.0221 359.9269,1080.1694 345.3311,1097.8142 " fill="none" id="analysisTable->ACTIONTable" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></path><polygon fill="#A80036" points="342.026,1101.8085,350.5137,1097.5879,345.0934,1098.1004,344.5808,1092.6801,342.026,1101.8085" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></polygon><!--MD5=[f4fc089635001a13e2dc525d5da00965]
link analysisTable to GOTOTable--><path d="M602.8845,1044.4601 C633.2868,1074.5621 665.4273,1106.3859 693.768,1134.4466 " fill="none" id="analysisTable->GOTOTable" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></path><polygon fill="#A80036" points="697.205,1137.8499,693.7558,1129.0205,693.7844,1134.465,688.3399,1134.4935,697.205,1137.8499" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></polygon><!--MD5=[de42c04f09a3219973233684cb91c951]
reverse link symbolsVT to ACTIONTable--><path d="M179.9288,203.2628 C173.0346,229.1915 166.5813,257.9692 163.1376,284.8893 C125.6545,577.8855 183.0212,924.8181 219.5188,1101.6737 " fill="none" id="symbolsVT&lt;-ACTIONTable" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></path><polygon fill="#A80036" points="181.2204,198.4504,175.2713,205.8304,179.9822,203.1007,182.7118,207.8115,181.2204,198.4504" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></polygon><!--MD5=[11d9fd4fbaca279cae984a2f85cc42c6]
reverse link symbolsVN to GOTOTable--><path d="M779.8114,232.1078 C787.0597,249.3359 793.3032,267.257 797.4013,284.8893 C869.1078,593.4398 820.0674,974.9124 792.8835,1137.9836 " fill="none" id="symbolsVN&lt;-GOTOTable" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></path><polygon fill="#A80036" points="777.7411,227.2666,777.5919,236.7446,779.6261,231.6944,784.6764,233.7285,777.7411,227.2666" style="stroke: #A80036; stroke-width: 0.9624639076034649;"></polygon><!--MD5=[5326e6dc361675af4b9ab35d97fc1530]
@startuml
hide empty description
scale 1000 width
class symbols{
    终结符和非终结符组成的符号
    ..
    - place: std::string 属性文法中place的值
    - ans: int  如果是算术表达式，记录其值
    + getClassName(): virtual std::string
    + print(): virtual void
    + setPlace(std::string p): void 
    + getPlace(): std::string
    + setAns(int): void 
    + getAns(): int
}
class symbolsVT{
    终结符
    终结符由终结符的值和编码构成
    ..
    - word: std::string 终结符的值
    - code: std::string 词法分析后终结符的标识（编码）
    + getClassName(): virtual std::string
    + getWord(): std::string
    + getCode(): std::string
    + print(): void
}
class symbolsVN{
    非终结符
    非终结符由其左部的非终结符和有部一个一些产生式构成
    产生式即为一些符号的排列，此处存储的是一些产生式的指针
    ..
    - name: std::string 非终结符左部名称X
    - p[maxnNum]: production * 产生式集合
    - num: int  产生式个数
    + getClassName(): std::string
    + getName(): std::string
    + insertProduction(production *newp): void 加入一个产生式
    + getProductionIndexOf(int i): production* 获得第i个产生式
    + getAllProduction(): 获得所有的产生式
    + print(): void
}
class production{
    产生式
    一个产生式由一个左部的非终结符和一些右部的符号集合构成
    ..
    - vn: symbolsVN * 产生式左部的非终结符
    - pro[maxnLen]: symbols* 产生式，由一些非终结符和终结符构成，故使用符号指针来指引
    - (*attributes) (production *p): void 每一条产生式对应的一些属性文法的操作，用指针函数实现
    + push_back(symbols *a): void 为产生式后部插入一个符号
    + getVN(): symbolsVN* 获得左部非终结符符号
    + getProduction(): symbols** 获得产生式指针数组
    + getLen(): int 获得产生式长度
    + getProductionIndexOf(int i): symbols* 获得产生式中第i个位置的符号
    + setAttributesFunction(void (*a)(production* p)): void 设置属性文法的函数
    + (*getAttributesFunction())(production*): void 获得该产生式对应的语义分析的代码
    + print(): void
}
class analysisTable{
    分析表
    由ACTION表和GOTO表组成
    由前期的分析得到该文法的SLR分析表
    ..
    - ACTION: ACTIONTable ACTION表
    - GOTO: GOTOTable GOTO表
    - numofstate: int 状态个数I_n
    - productions[NUMOFPRODUCTIONS]: production* 产生式数组，下标即为编号
    + insertSymbols(symbols*): void 插入一个符号
    + insertProduction(production* p): void 插入一条产生式，自动编号
    + getProduction(int i): production* 获得第i条产生式
    + insert(int state, symbols* s, char ch, int numOfPro): void 插入一个状态
    + get(int state, symbols* s): std::pair<char, int> 获得一个状态
    + print(): void
}
class ACTIONTable{
    - ACTION[NUMOFSTATE][NUMOFVT]: std::pair<char, int> ACTION表，四种构成： s_i, r_i, acc, err，\n分别表示移进状态、规约状态、接受状态和错误状态
    - numofstate: int ACTION表状态的数量
    - numofsymbolsvt: int ACTION表终结符的数量
    - vtmap: std::map<symbolsVT*, int> 终结符对应在分析表中的位置
    - getVTMap(symbolsVT*): int 获得终结符对应的编号
    + setNumOfState(int): void 设置表的状态的数量
    + insertVT(symbolsVT*): void 插入一个终结符以及给一个对应的编号
    + insertSHIFT(int state, symbolsVT* vt, int numOfPro): void 插入一个移进状态
    + insertREDUCE(int state, symbolsVT* vt, int numOfPro): void 插入一个规约状态
    + insertACC(int state, symbolsVT* vt): void 插入一个acc状态
    + getACTION(int state, symbolsVT* vt): std::pair<char, int> 获得一个ACTION信息
    + print(): void 调试输出ACTON表
}
class GOTOTable{
    - GOTO[NUMOFSTATE][NUMOFVN]: int GOTO表，当为非-1数字时表示某个合法状态
    - numofstate: int 
    - vnmap: std::map<symbolsVN*, int> 非终结符对应在分析表中的位置
    - getVNMap(symbolsVN*): int 获得非终结符对应的编号
    + setNumOfState(int): void 设置GOTO表的状态数
    + insertVN(symbolsVN*): void 插入一个非终结符
    + insert(int state, symbolsVN* vn, int numOfPro): void 插入一个GOTO状态
    + get(int state, symbolsVN* vn): int 获得一个GOTO状态
}
symbolsVT <|- - symbols
symbolsVN <|- - symbols
symbols <- - production
symbolsVN <- - production
production <- - analysisTable
symbolsVT <- - analysisTable
symbolsVN <- - analysisTable
analysisTable - -> ACTIONTable
analysisTable - -> GOTOTable
symbolsVT <- - ACTIONTable
symbolsVN <- - GOTOTable
@enduml

PlantUML version 1.2019.11(Sun Sep 22 18:02:15 CST 2019)
(MIT source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Java Version: 1.8.0_211-b12
Operating System: Windows 10
Default Encoding: GBK
Language: zh
Country: CN
--></g></svg>